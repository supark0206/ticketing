# docker-compose.yml
services:
  # 메인 애플리케이션
  concert-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - mailhog
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    labels:
      - "logging=promtail"
      - "logging.jobname=concert-app"


  # 데이터베이스
  postgres:
    image: postgres:15
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ticketing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234

  # 캐시
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # 메시징
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    restart: unless-stopped

  # 개발용 이메일 서버
  mailhog:
    image: mailhog/mailhog
    container_name: concert-mailhog
    ports:
      - "1025:1025"  # SMTP 포트
      - "8025:8025"  # Web UI 포트
    restart: unless-stopped

  # 모니터링
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-config:/etc/prometheus/
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - -config.file=/etc/promtail/promtail-config.yml
      - -config.expand-env=true
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    depends_on:
      - loki
      - concert-app
    restart: unless-stopped

volumes:
  prometheus-config:
  grafana-data:
  loki-data:  # Loki 데이터 영구 저장

configs:
  prometheus-config:
    content: |
      global:
        scrape_interval: 15s
      scrape_configs:
        - job_name: 'spring-boot'
          static_configs:
            - targets: ['host.docker.internal:8080']
          metrics_path: '/actuator/prometheus'