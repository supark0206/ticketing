spring:
  # 데이터베이스 설정
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://postgres:5432/ticketing}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:1234}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 10
      idle-timeout: 600000
      connection-timeout: 30000
      max-lifetime: 1800000

  # JPA 설정
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create-drop
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 5000ms
      jedis:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

  # RabbitMQ 설정
  rabbitmq:
    host: ${RABBITMQ_HOST:rabbitmq}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:admin}
    password: ${RABBITMQ_PASSWORD:admin123}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:/}
    listener:
      simple:
        acknowledge-mode: manual
        prefetch: 1
        retry:
          enabled: true
          max-attempts: 3
          initial-interval: 2s
          multiplier: 2

  # 메일 설정 (MailHog)
  mail:
    host: ${MAIL_HOST:mailhog}
    port: ${MAIL_PORT:1025}
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000

# 서버 설정
server:
  port: 8080
  tomcat:
    threads:
      max: 200
      min-spare: 10


# Swagger 설정 (Docker 개발 환경에서는 활성화)
springdoc:
  packages-to-scan: com.concertmania.ticketing
  packages-to-exclude: com.concertmania.ticketing.domain.generated
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    try-it-out-enabled: true
    operations-sorter: method
    tags-sorter: alpha
    display-request-duration: true
  show-actuator: true

# JWT 설정
jwt:
  secret: ${JWT_SECRET:dGlja2V0aW5nLXNlY3JldC1rZXktZm9yLWp3dC10b2tlbi1nZW5lcmF0aW9uLWFuZC12YWxpZGF0aW9uLWluLXNwcmluZy1ib290LWFwcGxpY2F0aW9u}
  token-validity-in-seconds: ${JWT_TOKEN_VALIDITY:86400}

# 로깅 설정 (logback-spring.xml에서 관리)
logging:
  config: classpath:logback-spring.xml

# 모니터링 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always  # Docker 환경에서는 디버깅을 위해 details 표시